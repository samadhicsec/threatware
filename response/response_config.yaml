---
response-config:
  output:
    template-text-file: response/response_texts.yaml
  html:
    scheme-specific:
      - regex: "^confluence"
        inject:
          location:
            element: "//html/body"
            index: -1                                        # The index of the child element to insert the content at.  -1 means the last element
          inline:
            style: |
              body { 
                background-color: #ffffff;
                padding: 72pt 72pt 72pt 72pt;
                width: 75vw;
                margin:auto;
              }

              table {
                border: 1px solid black;
                border-collapse: collapse;
                padding: 3px;
                margin-left: auto;
                margin-right: auto;
              }
            script: |
              colGroups = document.querySelectorAll("colgroup");
              colGroups.forEach((colGroup) => {
                colGroup.remove();
              });
      - regex: "^googledoc"
        inject:
          location:
            element: "//html/body"
            index: -1                                        # The index of the child element to insert the content at.  -1 means the last element
          inline:
            style: |
              body { 
                min-width: 80vh; 
                margin:auto;
              }
    banner:                                                 # The banner content will get added as the first child of the <body> tag
      text-keys:
        missing-findings: "html-banner-missing-findings"
      inject:
        location:
          element: "//html/body"
          index: 0                                        # The index of the child element to insert the content at.  -1 means the last element
        include:
          scripts:
          stylesheets:
        inline:
          element: |
            <div id="threatware-banner"></div>
          style: |
            #threatware-banner {
              /*display: flex;*/
              justify-content: left;
              width: 100%;
              min-height: 48px;
              padding-top: 1px;
              padding-bottom: 20px;
              padding-left: 30px;
              padding-right: 20px;
              line-height: normal;
              text-align: left;
              text-decoration: none;
              font-size: 24px;
              color: #181818;
              border-radius: 10px;
            }
            #threatware-banner[threatware-result="errors"] {
              background-color: #ffd6d6;
            }
            #threatware-banner[threatware-result="no-errors"] {
              background-color: #d6ffd6;
            }
          script: |
            const banner = document.getElementById("threatware-banner");
            if (banner) {
              // 'banner_msg' is set by a system added script
              banner.innerHTML = banner_msg;
              // 'threatware_result' is set by a system added script
              banner.setAttribute("threatware-result", threatware_result);
            }
    findings:                                               # The findings content will get added after the last child of the <body> tag
      finding-attributes:
        finding-index: "threatwarefinding"                  # The attribute that will be added to the locations of findings in the HTML, and contain the index of the finding in the results
        finding-type: "threatwarefinding-type"              # The attribute that will be added to the locations of findings in the HTML, and contain the type of finding e.g. error, warning, info
      inject:
        location:
          element: "//html/body"
          index: -1                                        # The index of the child element to insert the content at.  -1 means the last element
        include:
          scripts:
            - "https://unpkg.com/@popperjs/core@2.9.3/dist/umd/popper.min.js"
            - "https://unpkg.com/tippy.js@6/dist/tippy-bundle.umd.js"
          stylesheets:
            - "https://unpkg.com/tippy.js@6/themes/light.css"
            - "https://unpkg.com/tippy.js@6/themes/light-border.css"
            - "https://unpkg.com/tippy.js@6/themes/material.css"
            - "https://unpkg.com/tippy.js@6/themes/translucent.css"
            - "https://unpkg.com/tippy.js@6/animations/scale.css"
        inline:
          style: |
            [threatwarefinding-show=true][threatwarefinding-type="error"] {
              box-shadow: 0 0 5px 5px red;
            }
            [threatwarefinding-show=true][threatwarefinding-type="warning"] {
              box-shadow: 0 0 5px 5px gold;
            }
            [threatwarefinding-show=true][threatwarefinding-type="info"] {
              box-shadow: 0 0 5px 5px lightblue;
            }
            #tippytip {
              font-size: 1.3em;
            }
            .tippy-box[data-theme~=light-border] {
              background-color: #fcfcfc;
            }
            #tippytip > table, th, td {
              border: 1px solid black;
              border-collapse: collapse;
              padding: 3px;
            }
          script: |
            function formatfinding(finding) {
                return `<div id="tippytip">
                <h3>${finding["type"]} (${finding["verifier"]})</h3>
                <p><b>Description:</b> ${finding["error-description"]}</p>
                <p>${finding["error-data"] ? `<b>Error-Data:</b> ${finding["error-data"]}` : ""}</p>
                <p>${finding["fix-description"] ? `<b>Fix-Description:</b> ${finding["fix-description"]}` : ""}</p>
                <p>${finding["fix-data"] ? `<b>Fix-Data:</b> ${finding["fix-data"]}` : ""}</p>
                </div>`
            }
            // Need to read this from localStorage
            //var verifier_filter = [];
            if (typeof verifier_filter === 'undefined') {
              verifier_filter = [];
            }
        
            function setContent(reference) {
                const id = reference.getAttribute('threatwarefinding');
                // There can be multiple findings for the same location, so the 'id' can be a space separated list of indexes
                const indexes = id.split(" ");
                template = "";
                for (let i = 0; i < indexes.length; i++) {
                    if (verifier_filter.includes(threatwarefindings[indexes[i]]["verifier"])) {
                        continue;
                    }
                    template += formatfinding(threatwarefindings[indexes[i]]);
                    if (indexes.length > 1) {
                        template += "<hr>";
                    }
                }
                return template;
            }
            tippy.setDefaultProps({
                theme: 'light-border',
                animation: 'scale',
                placement: 'right',
                maxWidth: 650,
                content: (reference) => setContent(reference),
                allowHTML: true,
            });
            function tippySelector() {
                findings = document.querySelectorAll('[threatwarefinding]')
                findingsArray = Array.from(findings);

                // Since we may not want to show all the findings, hide them all first (in the sense of applying a CSS style)
                findingsArray.forEach((finding) => {
                    finding.setAttribute('threatwarefinding-show', false);
                });

                // Need to remove any elements that we are filtering by verifier class
                filteredFindingsArray = findingsArray.filter((finding) => {
                    return finding.getAttribute('threatwarefinding-class').split(" ").some((className) => { return !(verifier_filter.includes(className)) });
                });

                // Now show the filtered findings
                filteredFindingsArray.forEach((finding) => {
                    finding.setAttribute('threatwarefinding-show', true);
                });
                return filteredFindingsArray;
            }

            // Call `tippy()` with a CSS selector and a `content` prop:
            //tippy_obj = tippy('[threatwarefinding]');
            tippy_obj = tippy(tippySelector());

            function filterverifiers(event) {
                var checked = event.target.checked;
                if (typeof verifier_filter === 'undefined') {
                  verifier_filter = [];
                }
                if (checked) {
                    verifier_filter.push(event.target.name);
                } else {
                    verifier_filter = verifier_filter.filter(item => item !== event.target.name);
                }
                if (typeof tippy_obj !== 'undefined') {
                    tippy_obj.forEach((instance) => {
                      //instance.unmount();
                      instance.destroy();
                    });
                    tippy_obj = tippy(tippySelector());
                }
                return
            }